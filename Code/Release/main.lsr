STMicroelectronics assembler v4.52   (C)1987-2019   Wed Jun 19 15:36:19 2019
Page 1  Assembler
                                               e:\stm8s\elevator\main.asm

   1                         stm8/     
   2                         ;=================================
   3                         ; Author	: ZSAIm
   4                         ;
   5                         ; Function	: Elevator Controller
   6                         ; MCU		: STM8S105k4
   7                         ; LICENSE	: Apache-2.0
   8                         ;=================================
   9                         
   0  000000                                 #include "mapping.inc"
   1                                                          ;-------------------------------
                                                                ;-----------------------
   2                                                          ; SEGMENT MAPPING FILE 
                                                                ;AUTOMATICALLY GENERATED BY 
                                                                ;STVD
   3                                                          ; SHOULD NOT BE MANUALLY 
                                                                ;MODIFIED.
   4                                                          ; CHANGES WILL BE LOST WHEN FILE
                                                                ; IS REGENERATED.
   5                                                          ;-------------------------------
                                                                ;-----------------------
   6  000000                                 #define  RAM0 1
   7  000000                                 #define  ram0_segment_start 0
   8  000000                                 #define  ram0_segment_end FF
   9  000000                                 #define  RAM1 1
  10  000000                                 #define  ram1_segment_start 100
  11  000000                                 #define  ram1_segment_end 5FF
  12  000000                                 #define  stack_segment_start 600
  13  000000                                 #define  stack_segment_end 7FF
<END_OF_INCLUSION>
   0  000000                                 #include "main.inc"
   1                         
   2                         
   3  000000 U                               #IFDEF   __MAIN_ 1
   5                         
   6  000000                                 #define  __MAIN_ 1
   7                         
   8                                                          ; init function
   9  000000                                 extern   HSIClockInit.w
  10  000000                                 extern   OperationInit.w
  11  000000                                 extern   LED_Driver_Init.w
  12  000000                                 extern   Button_Init.w
  13  000000                                 extern   Timer3Init.w
  14                         
  15                                                          ; 
  16                                                          ; extern SendData2FK.w
  17                                                          ; extern SendData2CS.w
  18                                   
  19                                   
  20                                   
  21  000000                                 extern   LED_Refresh.w
  22                         
  23                                                          ; interrupt handler
  24  000000                                 extern   Button_Interrupt_Handler.L
  25  000000                                 extern   Timer3_Interrupt_Handler.L
  26                         
  27  000000                                 #ENDIF   
  28                         
STMicroelectronics assembler v4.52   (C)1987-2019   Wed Jun 19 15:36:19 2019
Page 2  Assembler
                                               e:\stm8s\elevator\main.asm

  29                         
  30                         
  31                         
  32                         
  33                         
  34                         
  35                         
  36                         
  37                         
<END_OF_INCLUSION>
  12                         
  13                                   
  14                                   segment  'rom'
  15                         main.l    
  16                                                          ; initialize SP
  17  000000   AE07FF                        ldw      X,#stack_end
  18  000003   94                            ldw      SP,X
  19                         
  20  000004                                 #ifdef   1             
  21                                                          ; clear RAM0
  22  000000                       ram0_start.b  EQU      $0
  23  0000FF                       ram0_end.b  EQU      $FF
  24  000004   AE0000                        ldw      X,#ram0_start
  25                         clear_ram0.l  
  26  000007   7F                            clr      (X)
  27  000008   5C                            incw     X
  28  000009   A300FF                        cpw      X,#ram0_end   
  29  00000C R 23F9                          jrule    clear_ram0
  30  00000E                                 #endif   
  31                         
  32  00000E                                 #ifdef   1
  33                                                          ; clear RAM1
  34  000100                       ram1_start.w  EQU      $100
  35  0005FF                       ram1_end.w  EQU      $5FF          
  36  00000E   AE0100                        ldw      X,#ram1_start
  37                         clear_ram1.l  
  38  000011   7F                            clr      (X)
  39  000012   5C                            incw     X
  40  000013   A305FF                        cpw      X,#ram1_end   
  41  000016 R 23F9                          jrule    clear_ram1
  42  000018                                 #endif   
  43                         
  44                                                          ; clear stack
  45  000600                       stack_start.w  EQU      $600
  46  0007FF                       stack_end.w  EQU      $7FF
  47  000018   AE0600                        ldw      X,#stack_start
  48                         clear_stack.l  
  49  00001B   7F                            clr      (X)
  50  00001C   5C                            incw     X
  51  00001D   A307FF                        cpw      X,#stack_end  
  52  000020 R 23F9                          jrule    clear_stack
  53                         
  54                         ;;;;;;;;;;;;;;;;;;;;;;;
  55  000022                                 INTEL    
  56  000022 X CD0000                        call     HSIClockInit
  57  000025 X CD0000                        call     OperationInit
  58  000028 X CD0000                        call     LED_Driver_Init
  59  00002B X CD0000                        call     Timer3Init
STMicroelectronics assembler v4.52   (C)1987-2019   Wed Jun 19 15:36:19 2019
Page 3  Assembler
                                               e:\stm8s\elevator\main.asm

  60  00002E X CD0000                        call     Button_Init
  61                                   
  62  000031 X CD0000                        call     LED_Refresh
  63                         
  64                         
  65                         
  66                         infinite_loop.l  
  67  000034   8F                            wfi      
  68  000035 R 20FD                          jra      infinite_loop
  69                         
  70                                   
  71  000037                                 MOTOROLA 
  72                         ;;;;;;;;;;;;;;;;;;;;;;;;;
  73  000037 R                               interrupt NonHandledInterrupt
  74                         NonHandledInterrupt.l  
  75  000037   80                            iret     
  76                         
  77                                   segment  'vectit'
  78  000000 R 00000000                      dc.l     {$82000000+main}  ; reset
  79  000004 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; trap
  80  000008 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq0
  81  00000C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq1
  82  000010 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq2
  83  000014 X 00000000                      dc.l     {$82000000+Button_Interrupt_Handler}  ; irq3
  84  000018 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq4
  85  00001C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq5
  86  000020 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq6
  87  000024 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq7
  88  000028 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq8
  89  00002C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq9
  90  000030 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq10
  91  000034 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq11
  92  000038 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq12
  93  00003C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq13
  94  000040 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq14
  95  000044 X 00000000                      dc.l     {$82000000+Timer3_Interrupt_Handler}  ; irq15
  96  000048 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq16
  97  00004C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq17
  98  000050 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq18
  99  000054 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq19
 100  000058 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq20
 101  00005C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq21
 102  000060 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq22
 103  000064 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq23
 104  000068 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq24
 105  00006C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq25
 106  000070 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq26
 107  000074 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq27
 108  000078 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq28
 109  00007C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq29
 110                         
 111  000080                                 end      
STMicroelectronics assembler v4.52   (C)1987-2019   Wed Jun 19 15:36:19 2019
Page 4  Assembler
                                               e:\stm8s\elevator\main.asm

Symbol Name                       Value     Call       Type  Scope      Rel.  Line  Privacy  Segment   Size  Bytes File

Button_Init                       ????????         no  WORD  External   rel     12  private  data         0     0  e:\stm8s\elevator\main.inc
Button_Interrupt_Handler          ????????         no  LONG  External   rel     24  private  data         0     0  e:\stm8s\elevator\main.inc

HSIClockInit                      ????????         no  WORD  External   rel      9  private  data         0     0  e:\stm8s\elevator\main.inc

LED_Driver_Init                   ????????         no  WORD  External   rel     11  private  data         0     0  e:\stm8s\elevator\main.inc
LED_Refresh                       ????????         no  WORD  External   rel     21  private  data         0     0  e:\stm8s\elevator\main.inc

NonHandledInterrupt               00000037  interrupt  LONG  Internal   rel     74  private  text         1     0  -

OperationInit                     ????????         no  WORD  External   rel     10  private  data         0     0  e:\stm8s\elevator\main.inc

Timer3Init                        ????????         no  WORD  External   rel     13  private  data         0     0  e:\stm8s\elevator\main.inc
Timer3_Interrupt_Handler          ????????         no  LONG  External   rel     25  private  data         0     0  e:\stm8s\elevator\main.inc

clear_ram0                        00000007         no  LONG  Internal   rel     25  private  text        10     0  -
clear_ram1                        00000011         no  LONG  Internal   rel     37  private  text        10     0  -
clear_stack                       0000001B         no  LONG  Internal   rel     48  private  text        25     0  -

infinite_loop                     00000034         no  LONG  Internal   rel     66  private  text         3     0  -

main                              00000000         no  LONG  Internal   rel     15  private  text         7     0  -

ram0_start                              00         no  BYTE  Internal   ABS     22  private  text         0     0  -
ram0_end                                FF         no  BYTE  Internal   ABS     23  private  text         0     0  -
ram1_start                            0100         no  WORD  Internal   ABS     34  private  text         0     0  -
ram1_end                              05FF         no  WORD  Internal   ABS     35  private  text         0     0  -

stack_start                           0600         no  WORD  Internal   ABS     45  private  text         0     0  -
stack_end                             07FF         no  WORD  Internal   ABS     46  private  text         0     0  -


20 labels
No errors on assembly of 'e:\stm8s\elevator\main.asm'